package meta

import (
	"encoding/json"
	"fmt"
	"github.com/gangachris/vida/models"
	"github.com/pkg/errors"
	"io/ioutil"
	"net/http"
)

const (
	imdbJSONPAPI     = "https://v2.sg.media-imdb.com/suggestion"
	imdbVideoBaseURL = "https://www.imdb.com/videoplayer"
)

var (
	errMovieNotFound = errors.New("Movie not found")
)

// SearchIMDB searches for a movie in IMDB
func SearchIMDB(title string) (s IMDBSuggestion, err error) {
	url := fmt.Sprintf("%s/%c/%s.json", imdbJSONPAPI, title[0], title)
	resp, err := http.Get(url)
	if err != nil {
		return s, errors.Wrap(err, "error while making http request to"+url)
	}
	defer resp.Body.Close()

	b, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return s, errors.Wrap(err, "error while reading response body")
	}

	if err = json.Unmarshal(b, &s); err != nil {
		return s, errors.Wrap(err, "could not unmarshal JSON: "+string(b))
	}
	return
}

// Generated by https://quicktype.io

// IMDBSuggestion is the json response structure from IMDB
type IMDBSuggestion struct {
	V    int64  `json:"v"`
	Q    string `json:"q"`
	Data []data `json:"d"`
}

type data struct {
	Title   string  `json:"l"`
	IMDBID  string  `json:"id"`
	Staring string  `json:"s"` // staring, comma separated start names
	Year    int64   `json:"y"`
	Yr      *string `json:"yr,omitempty"`
	Q       string  `json:"q"`            // not sure what Q is currently
	VT      *int64  `json:"vt,omitempty"` // not sure what vt is.. sounds like Video Total
	Image   i       `json:"i"`
	Videos  []v     `json:"v"`
}

type v struct {
	Title    string `json:"l"`
	IMDBID   string `json:"id"`
	Duration string `json:"s"`
	Image    i      `json:"i"`
}

type i struct {
	Height   int    `json:"height"`
	Width    int    `json:"width"`
	ImageURL string `json:"imageUrl"`
}

// ToMovie converts an IMDB suggestion to our movie model
func (i *IMDBSuggestion) ToMovie() (movie models.Movie, err error) {
	// we'll pick the first array for now
	if len(i.Data) == 0 {
		return movie, errMovieNotFound
	}

	// we take the first suggestion from IMDB
	m := i.Data[0]

	var trailerURL string
	if len(m.Videos) > 0 {
		trailerURL = fmt.Sprintf("%s/%s", imdbVideoBaseURL, m.Videos[0].IMDBID)
	}

	movie = models.Movie{
		IMDBID:     m.IMDBID,
		Title:      m.Title,
		ImageURL:   m.Image.ImageURL,
		TrailerURL: trailerURL,
		Year:       m.Year,
	}

	imdbJSON, err := json.Marshal(i)
	if err != nil {
		return
	}
	movie.IMDBJSON = string(imdbJSON)
	return movie, nil
}
