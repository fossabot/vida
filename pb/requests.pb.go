// Code generated by protoc-gen-go. DO NOT EDIT.
// source: requests.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Movie struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ImdbId               string   `protobuf:"bytes,2,opt,name=imdb_id,json=imdbId,proto3" json:"imdb_id,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Synopsis             string   `protobuf:"bytes,4,opt,name=synopsis,proto3" json:"synopsis,omitempty"`
	ImageUrl             string   `protobuf:"bytes,5,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	TrailerUrl           string   `protobuf:"bytes,6,opt,name=trailer_url,json=trailerUrl,proto3" json:"trailer_url,omitempty"`
	Starring             string   `protobuf:"bytes,7,opt,name=starring,proto3" json:"starring,omitempty"`
	Duration             string   `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
	Year                 int64    `protobuf:"varint,9,opt,name=year,proto3" json:"year,omitempty"`
	ReleaseDate          int64    `protobuf:"varint,10,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Search               string   `protobuf:"bytes,11,opt,name=search,proto3" json:"search,omitempty"`
	PlaybackUri          string   `protobuf:"bytes,12,opt,name=playback_uri,json=playbackUri,proto3" json:"playback_uri,omitempty"`
	CreatedAt            int64    `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ImdbJson             string   `protobuf:"bytes,15,opt,name=imdb_json,json=imdbJson,proto3" json:"imdb_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Movie) Reset()         { *m = Movie{} }
func (m *Movie) String() string { return proto.CompactTextString(m) }
func (*Movie) ProtoMessage()    {}
func (*Movie) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{0}
}

func (m *Movie) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Movie.Unmarshal(m, b)
}
func (m *Movie) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Movie.Marshal(b, m, deterministic)
}
func (m *Movie) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Movie.Merge(m, src)
}
func (m *Movie) XXX_Size() int {
	return xxx_messageInfo_Movie.Size(m)
}
func (m *Movie) XXX_DiscardUnknown() {
	xxx_messageInfo_Movie.DiscardUnknown(m)
}

var xxx_messageInfo_Movie proto.InternalMessageInfo

func (m *Movie) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Movie) GetImdbId() string {
	if m != nil {
		return m.ImdbId
	}
	return ""
}

func (m *Movie) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Movie) GetSynopsis() string {
	if m != nil {
		return m.Synopsis
	}
	return ""
}

func (m *Movie) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *Movie) GetTrailerUrl() string {
	if m != nil {
		return m.TrailerUrl
	}
	return ""
}

func (m *Movie) GetStarring() string {
	if m != nil {
		return m.Starring
	}
	return ""
}

func (m *Movie) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *Movie) GetYear() int64 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *Movie) GetReleaseDate() int64 {
	if m != nil {
		return m.ReleaseDate
	}
	return 0
}

func (m *Movie) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *Movie) GetPlaybackUri() string {
	if m != nil {
		return m.PlaybackUri
	}
	return ""
}

func (m *Movie) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Movie) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Movie) GetImdbJson() string {
	if m != nil {
		return m.ImdbJson
	}
	return ""
}

type SearchMovieRequest struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchMovieRequest) Reset()         { *m = SearchMovieRequest{} }
func (m *SearchMovieRequest) String() string { return proto.CompactTextString(m) }
func (*SearchMovieRequest) ProtoMessage()    {}
func (*SearchMovieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{1}
}

func (m *SearchMovieRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchMovieRequest.Unmarshal(m, b)
}
func (m *SearchMovieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchMovieRequest.Marshal(b, m, deterministic)
}
func (m *SearchMovieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchMovieRequest.Merge(m, src)
}
func (m *SearchMovieRequest) XXX_Size() int {
	return xxx_messageInfo_SearchMovieRequest.Size(m)
}
func (m *SearchMovieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchMovieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchMovieRequest proto.InternalMessageInfo

func (m *SearchMovieRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type SearchMovieResponse struct {
	Movies               []*Movie `protobuf:"bytes,1,rep,name=movies,proto3" json:"movies,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchMovieResponse) Reset()         { *m = SearchMovieResponse{} }
func (m *SearchMovieResponse) String() string { return proto.CompactTextString(m) }
func (*SearchMovieResponse) ProtoMessage()    {}
func (*SearchMovieResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9ccec99da7c9b4, []int{2}
}

func (m *SearchMovieResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchMovieResponse.Unmarshal(m, b)
}
func (m *SearchMovieResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchMovieResponse.Marshal(b, m, deterministic)
}
func (m *SearchMovieResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchMovieResponse.Merge(m, src)
}
func (m *SearchMovieResponse) XXX_Size() int {
	return xxx_messageInfo_SearchMovieResponse.Size(m)
}
func (m *SearchMovieResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchMovieResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchMovieResponse proto.InternalMessageInfo

func (m *SearchMovieResponse) GetMovies() []*Movie {
	if m != nil {
		return m.Movies
	}
	return nil
}

func init() {
	proto.RegisterType((*Movie)(nil), "vida.Movie")
	proto.RegisterType((*SearchMovieRequest)(nil), "vida.SearchMovieRequest")
	proto.RegisterType((*SearchMovieResponse)(nil), "vida.SearchMovieResponse")
}

func init() { proto.RegisterFile("requests.proto", fileDescriptor_9c9ccec99da7c9b4) }

var fileDescriptor_9c9ccec99da7c9b4 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x95, 0xfe, 0xc9, 0x6e, 0x26, 0xa5, 0x48, 0x03, 0x5a, 0x4c, 0x57, 0x88, 0x52, 0x2e,
	0x3d, 0x65, 0xd1, 0x72, 0x40, 0xe2, 0x82, 0x16, 0xc1, 0x01, 0x04, 0x97, 0xa2, 0xbd, 0x70, 0x89,
	0x9c, 0x7a, 0xe8, 0x1a, 0xd2, 0x38, 0xd8, 0xce, 0x4a, 0x7d, 0x05, 0xde, 0x83, 0xf7, 0x44, 0x1e,
	0x27, 0xa8, 0x88, 0xbd, 0xe5, 0xfb, 0x7e, 0x33, 0x5f, 0x6c, 0xcf, 0xc0, 0xdc, 0xd2, 0xcf, 0x8e,
	0x9c, 0x77, 0x45, 0x6b, 0x8d, 0x37, 0x38, 0xb9, 0xd5, 0x4a, 0x2e, 0xce, 0x77, 0xc6, 0xec, 0x6a,
	0xba, 0x60, 0xaf, 0xea, 0xbe, 0x5d, 0xd0, 0xbe, 0xf5, 0x87, 0x58, 0xb2, 0xfa, 0x3d, 0x86, 0xe9,
	0x67, 0x73, 0xab, 0x09, 0xe7, 0x30, 0xd2, 0x4a, 0x24, 0xcb, 0x64, 0x3d, 0xde, 0x8c, 0xb4, 0xc2,
	0x47, 0x70, 0xa2, 0xf7, 0xaa, 0x2a, 0xb5, 0x12, 0xa3, 0x65, 0xb2, 0xce, 0x36, 0x69, 0x90, 0x1f,
	0x14, 0x3e, 0x84, 0xa9, 0xd7, 0xbe, 0x26, 0x31, 0x66, 0x3b, 0x0a, 0x5c, 0xc0, 0xa9, 0x3b, 0x34,
	0xa6, 0x75, 0xda, 0x89, 0x09, 0x83, 0xbf, 0x1a, 0xcf, 0x21, 0xd3, 0x7b, 0xb9, 0xa3, 0xb2, 0xb3,
	0xb5, 0x98, 0x46, 0xc8, 0xc6, 0xb5, 0xad, 0xf1, 0x29, 0xe4, 0xde, 0x4a, 0x5d, 0x93, 0x65, 0x9c,
	0x32, 0x86, 0xde, 0x0a, 0x05, 0x21, 0xd9, 0x4b, 0x6b, 0x75, 0xb3, 0x13, 0x27, 0x7d, 0x72, 0xaf,
	0x03, 0x53, 0x9d, 0x95, 0x5e, 0x9b, 0x46, 0x9c, 0x46, 0x36, 0x68, 0x44, 0x98, 0x1c, 0x48, 0x5a,
	0x91, 0xf1, 0x95, 0xf8, 0x1b, 0x9f, 0xc1, 0xcc, 0x52, 0x4d, 0xd2, 0x51, 0xa9, 0xa4, 0x27, 0x01,
	0xcc, 0xf2, 0xde, 0x7b, 0x27, 0x3d, 0xe1, 0x19, 0xa4, 0x8e, 0xa4, 0xdd, 0xde, 0x88, 0x3c, 0x5e,
	0x3b, 0xaa, 0xd0, 0xda, 0xd6, 0xf2, 0x50, 0xc9, 0xed, 0x8f, 0xb2, 0xb3, 0x5a, 0xcc, 0x98, 0xe6,
	0x83, 0x77, 0x6d, 0x35, 0x3e, 0x01, 0xd8, 0x5a, 0x92, 0x9e, 0x54, 0x29, 0xbd, 0xb8, 0xc7, 0xd9,
	0x59, 0xef, 0x5c, 0xf9, 0x80, 0xbb, 0x56, 0x0d, 0x78, 0x1e, 0x71, 0xef, 0x5c, 0xf9, 0xf8, 0x4a,
	0xaa, 0x2a, 0xbf, 0x3b, 0xd3, 0x88, 0xfb, 0xc3, 0x2b, 0xa9, 0xea, 0xa3, 0x33, 0xcd, 0x6a, 0x0d,
	0xf8, 0x85, 0xcf, 0xc1, 0xc3, 0xda, 0xc4, 0x39, 0x87, 0x2b, 0xb6, 0xd2, 0xdf, 0xf0, 0xd4, 0xb2,
	0x0d, 0x7f, 0xaf, 0x5e, 0xc3, 0x83, 0x7f, 0x2a, 0x5d, 0x6b, 0x1a, 0x47, 0xf8, 0x1c, 0xd2, 0x7d,
	0x30, 0x9c, 0x48, 0x96, 0xe3, 0x75, 0x7e, 0x99, 0x17, 0x61, 0x39, 0x8a, 0x58, 0xd4, 0xa3, 0xcb,
	0x5f, 0x09, 0xcc, 0xd9, 0x71, 0xfd, 0x1f, 0x1c, 0xbe, 0x82, 0xd9, 0x51, 0x9c, 0x43, 0x11, 0xfb,
	0xfe, 0x3f, 0xcc, 0xe2, 0x38, 0xf1, 0x45, 0x82, 0x6f, 0x00, 0x3e, 0x69, 0xe7, 0xfb, 0xb6, 0xb3,
	0x22, 0x6e, 0x61, 0x31, 0x6c, 0x61, 0xf1, 0x3e, 0x6c, 0xe1, 0xe2, 0xf1, 0x1d, 0x71, 0xf1, 0xc4,
	0x6f, 0x27, 0x5f, 0x47, 0x6d, 0x55, 0xa5, 0xdc, 0xf0, 0xf2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x7d, 0x6e, 0x77, 0xd2, 0xdc, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MoviesRequestsClient is the client API for MoviesRequests service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MoviesRequestsClient interface {
	SearchMovies(ctx context.Context, in *SearchMovieRequest, opts ...grpc.CallOption) (MoviesRequests_SearchMoviesClient, error)
	ListMovies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SearchMovieResponse, error)
}

type moviesRequestsClient struct {
	cc *grpc.ClientConn
}

func NewMoviesRequestsClient(cc *grpc.ClientConn) MoviesRequestsClient {
	return &moviesRequestsClient{cc}
}

func (c *moviesRequestsClient) SearchMovies(ctx context.Context, in *SearchMovieRequest, opts ...grpc.CallOption) (MoviesRequests_SearchMoviesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MoviesRequests_serviceDesc.Streams[0], "/vida.MoviesRequests/SearchMovies", opts...)
	if err != nil {
		return nil, err
	}
	x := &moviesRequestsSearchMoviesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MoviesRequests_SearchMoviesClient interface {
	Recv() (*Movie, error)
	grpc.ClientStream
}

type moviesRequestsSearchMoviesClient struct {
	grpc.ClientStream
}

func (x *moviesRequestsSearchMoviesClient) Recv() (*Movie, error) {
	m := new(Movie)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *moviesRequestsClient) ListMovies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SearchMovieResponse, error) {
	out := new(SearchMovieResponse)
	err := c.cc.Invoke(ctx, "/vida.MoviesRequests/ListMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoviesRequestsServer is the server API for MoviesRequests service.
type MoviesRequestsServer interface {
	SearchMovies(*SearchMovieRequest, MoviesRequests_SearchMoviesServer) error
	ListMovies(context.Context, *empty.Empty) (*SearchMovieResponse, error)
}

func RegisterMoviesRequestsServer(s *grpc.Server, srv MoviesRequestsServer) {
	s.RegisterService(&_MoviesRequests_serviceDesc, srv)
}

func _MoviesRequests_SearchMovies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchMovieRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MoviesRequestsServer).SearchMovies(m, &moviesRequestsSearchMoviesServer{stream})
}

type MoviesRequests_SearchMoviesServer interface {
	Send(*Movie) error
	grpc.ServerStream
}

type moviesRequestsSearchMoviesServer struct {
	grpc.ServerStream
}

func (x *moviesRequestsSearchMoviesServer) Send(m *Movie) error {
	return x.ServerStream.SendMsg(m)
}

func _MoviesRequests_ListMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesRequestsServer).ListMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vida.MoviesRequests/ListMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesRequestsServer).ListMovies(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MoviesRequests_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vida.MoviesRequests",
	HandlerType: (*MoviesRequestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMovies",
			Handler:    _MoviesRequests_ListMovies_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchMovies",
			Handler:       _MoviesRequests_SearchMovies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "requests.proto",
}
